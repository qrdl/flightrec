# Caller must set $(path)
# Assuming that debug server is already started by prev script

case "Next from first line" {
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":8}'
    response {
        expect /type == "response"
        expect /command == next
        expect /request_seq == 8
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":9}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 9
        expect /success == true
        expect /body/totalFrames == 1

        expect /body/stackFrames[0]/name == main
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 30
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == a.c
        expect /body/stackFrames[0]/source/path == "$(path)/a.c"
        expect /body/stackFrames[0]/source/sourceReference == 0
    }
}

case "Step into function" {
    request '{"command":"stepIn","arguments":{"threadId":1},"type":"request","seq":10}'
    response {
        expect /type == "response"
        expect /command == stepIn
        expect /request_seq == 10
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":11}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 11
        expect /success == true
        expect /body/totalFrames == 2

        expect /body/stackFrames[0]/name == a
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 22
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == a.c
        expect /body/stackFrames[0]/source/path == "$(path)/a.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

        expect /body/stackFrames[1]/name == main
        expect /body/stackFrames[1]/id == 1
        expect /body/stackFrames[1]/line == 30
        expect /body/stackFrames[1]/column == 0
        expect /body/stackFrames[1]/source/name == a.c
        expect /body/stackFrames[1]/source/path == "$(path)/a.c"
        expect /body/stackFrames[1]/source/sourceReference == 0
    }
}

case "Step in - next line" {
    request '{"command":"stepIn","arguments":{"threadId":1},"type":"request","seq":12}'
    response {
        expect /type == "response"
        expect /command == stepIn
        expect /request_seq == 12
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":13}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 13
        expect /success == true
        expect /body/totalFrames == 2

        expect /body/stackFrames[0]/name == a
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 23  # changed
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == a.c
        expect /body/stackFrames[0]/source/path == "$(path)/a.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

        expect /body/stackFrames[1]/name == main
        expect /body/stackFrames[1]/id == 1
        expect /body/stackFrames[1]/line == 30
        expect /body/stackFrames[1]/column == 0
        expect /body/stackFrames[1]/source/name == a.c
        expect /body/stackFrames[1]/source/path == "$(path)/a.c"
        expect /body/stackFrames[1]/source/sourceReference == 0
    }
}

case "Step into function in different unit" {
    request '{"command":"stepIn","arguments":{"threadId":1},"type":"request","seq":14}'
    response {
        expect /type == "response"
        expect /command == stepIn
        expect /request_seq == 14
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":15}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 15
        expect /success == true
        expect /body/totalFrames == 3

        expect /body/stackFrames[0]/name == foo
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 5
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == b.c
        expect /body/stackFrames[0]/source/path == "$(path)/b.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

        expect /body/stackFrames[1]/name == a
        expect /body/stackFrames[1]/id == 1
        expect /body/stackFrames[1]/line == 23  # changed
        expect /body/stackFrames[1]/column == 0
        expect /body/stackFrames[1]/source/name == a.c
        expect /body/stackFrames[1]/source/path == "$(path)/a.c"
        expect /body/stackFrames[1]/source/sourceReference == 0

        expect /body/stackFrames[2]/name == main
        expect /body/stackFrames[2]/id == 2
        expect /body/stackFrames[2]/line == 30
        expect /body/stackFrames[2]/column == 0
        expect /body/stackFrames[2]/source/name == a.c
        expect /body/stackFrames[2]/source/path == "$(path)/a.c"
        expect /body/stackFrames[2]/source/sourceReference == 0
    }
}

case "Next" {
    request '{"command":"stepIn","arguments":{"threadId":1},"type":"request","seq":16}'
    response {
        expect /type == "response"
        expect /command == stepIn
        expect /request_seq == 16
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":17}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 17
        expect /success == true
        expect /body/totalFrames == 3

        expect /body/stackFrames[0]/name == foo
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 6   # changed
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == b.c
        expect /body/stackFrames[0]/source/path == "$(path)/b.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

        expect /body/stackFrames[1]/name == a
        expect /body/stackFrames[1]/id == 1
        expect /body/stackFrames[1]/line == 23  # changed
        expect /body/stackFrames[1]/column == 0
        expect /body/stackFrames[1]/source/name == a.c
        expect /body/stackFrames[1]/source/path == "$(path)/a.c"
        expect /body/stackFrames[1]/source/sourceReference == 0

        expect /body/stackFrames[2]/name == main
        expect /body/stackFrames[2]/id == 2
        expect /body/stackFrames[2]/line == 30
        expect /body/stackFrames[2]/column == 0
        expect /body/stackFrames[2]/source/name == a.c
        expect /body/stackFrames[2]/source/path == "$(path)/a.c"
        expect /body/stackFrames[2]/source/sourceReference == 0
    }
}

case "Step out" {
    request '{"command":"stepOut","arguments":{"threadId":1},"type":"request","seq":18}'
    response {
        expect /type == "response"
        expect /command == stepOut  
        expect /request_seq == 18
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":19}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 19
        expect /success == true
        expect /body/totalFrames == 2

        expect /body/stackFrames[0]/name == a
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 24
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == a.c
        expect /body/stackFrames[0]/source/path == "$(path)/a.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

        expect /body/stackFrames[1]/name == main
        expect /body/stackFrames[1]/id == 1
        expect /body/stackFrames[1]/line == 30
        expect /body/stackFrames[1]/column == 0
        expect /body/stackFrames[1]/source/name == a.c
        expect /body/stackFrames[1]/source/path == "$(path)/a.c"
        expect /body/stackFrames[1]/source/sourceReference == 0
    }
}

case "Next (step over function call)" {
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":20}'
    response {
        expect /type == "response"
        expect /command == next
        expect /request_seq == 20
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":19}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 19
        expect /success == true
        expect /body/totalFrames == 2

        expect /body/stackFrames[0]/name == a
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 25
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == a.c
        expect /body/stackFrames[0]/source/path == "$(path)/a.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

        expect /body/stackFrames[1]/name == main
        expect /body/stackFrames[1]/id == 1
        expect /body/stackFrames[1]/line == 30
        expect /body/stackFrames[1]/column == 0
        expect /body/stackFrames[1]/source/name == a.c
        expect /body/stackFrames[1]/source/path == "$(path)/a.c"
        expect /body/stackFrames[1]/source/sourceReference == 0
    }
}

case "Step in (no function call, equivalent to next)" {
    request '{"command":"stepIn","arguments":{"threadId":1},"type":"request","seq":22}'
    response {
        expect /type == "response"
        expect /command == stepIn
        expect /request_seq == 22
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":23}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 23
        expect /success == true
        expect /body/totalFrames == 2

        expect /body/stackFrames[0]/name == a
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 26
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == a.c
        expect /body/stackFrames[0]/source/path == "$(path)/a.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

        expect /body/stackFrames[1]/name == main
        expect /body/stackFrames[1]/id == 1
        expect /body/stackFrames[1]/line == 30
        expect /body/stackFrames[1]/column == 0
        expect /body/stackFrames[1]/source/name == a.c
        expect /body/stackFrames[1]/source/path == "$(path)/a.c"
        expect /body/stackFrames[1]/source/sourceReference == 0
    }
}

case "Step back one line" {
    request '{"command":"stepBack","arguments":{"threadId":1},"type":"request","seq":24}'
    response {
        expect /type == "response"
        expect /command == stepBack
        expect /request_seq == 24
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":25}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 25
        expect /success == true
        expect /body/totalFrames == 2

        expect /body/stackFrames[0]/name == a
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 25
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == a.c
        expect /body/stackFrames[0]/source/path == "$(path)/a.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

        expect /body/stackFrames[1]/name == main
        expect /body/stackFrames[1]/id == 1
        expect /body/stackFrames[1]/line == 30
        expect /body/stackFrames[1]/column == 0
        expect /body/stackFrames[1]/source/name == a.c
        expect /body/stackFrames[1]/source/path == "$(path)/a.c"
        expect /body/stackFrames[1]/source/sourceReference == 0
    }
}

case "Step back over function call" {
    request '{"command":"stepBack","arguments":{"threadId":1},"type":"request","seq":26}'
    response {
        expect /type == "response"
        expect /command == stepBack
        expect /request_seq == 26
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":27}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 27
        expect /success == true
        expect /body/totalFrames == 2

        expect /body/stackFrames[0]/name == a
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 24
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == a.c
        expect /body/stackFrames[0]/source/path == "$(path)/a.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

        expect /body/stackFrames[1]/name == main
        expect /body/stackFrames[1]/id == 1
        expect /body/stackFrames[1]/line == 30
        expect /body/stackFrames[1]/column == 0
        expect /body/stackFrames[1]/source/name == a.c
        expect /body/stackFrames[1]/source/path == "$(path)/a.c"
        expect /body/stackFrames[1]/source/sourceReference == 0
    }
}

case "Step out to main" {
    request '{"command":"stepOut","arguments":{"threadId":1},"type":"request","seq":28}'
    response {
        expect /type == "response"
        expect /command == stepOut
        expect /request_seq == 28
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == step
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":29}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 29
        expect /success == true
        expect /body/totalFrames == 1
        
        expect /body/stackFrames[0]/name == main
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 31
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == a.c
        expect /body/stackFrames[0]/source/path == "$(path)/a.c"
        expect /body/stackFrames[0]/source/sourceReference == 0
    }
}

stop
