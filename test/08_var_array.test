# Caller must set $(path)
start "../examine/fr_examine"

case "Init" {
    request '{"command":"initialize","arguments":{"clientID":"tester","clientName":"Tester"},"type":"request","seq":1}'
    # response
    response {
        # ignore init response
    }
    response {
        # ignore init done event
    }
    request '{"command":"launch","arguments":{"request":"launch","program":"$(path)/test07","sourcePath":"$(path)","stopOnEntry":true},"type":"request","seq":2}'
    # response
    response {
        expect /type == "response"
        expect /command == launch
        expect /request_seq == 2
        expect /success == true
    }
    response {
        expect /type == event
        expect /event == stopped
        expect /body/reason == entry
    }
    request '{"command":"configurationDone","type":"request","seq":3}'
    response {
        expect /type == "response"
        expect /command == configurationDone
        expect /request_seq == 3
        expect /success == true
    }

    # get scopes
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":4}'
    response {
        expect /type == "response"
        expect /command == stackTrace
        expect /request_seq == 4
        expect /success == true

        expect /body/stackFrames[0]/name == main
        expect /body/stackFrames[0]/id == 0
        expect /body/stackFrames[0]/line == 5
        expect /body/stackFrames[0]/column == 0
        expect /body/stackFrames[0]/source/name == test07.c
        expect /body/stackFrames[0]/source/path == "$(path)/test07.c"
        expect /body/stackFrames[0]/source/sourceReference == 0

    }
    request '{"command":"scopes","arguments":{"frameId":0},"type":"request","seq":5}'
    response {
        expect /type == "response"
        expect /command == scopes
        expect /request_seq == 5
        expect /success == true

        expect /body/scopes[0]/name == Globals
        set global_scope = /body/scopes[0]/variablesReference

        expect /body/scopes[1]/name == Locals
        set local_scope = /body/scopes[1]/variablesReference
    }
}

case "Get global double array" {
    request '{"command":"variables","arguments":{"variablesReference":$(global_scope) },"type":"request","seq":6}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 6
        expect /success == true
        expect LENGTH(/body/variables) == 1

        expect /body/variables[0]/name == foo
        set foo_ref = /body/variables[0]/variablesReference
        expect /body/variables[0]/indexedVariables == 5
        expect /body/variables[0]/value == "double[]"
    }
    request '{"command":"variables","arguments":{"variablesReference":$(foo_ref), "filter":"indexed", "start": 0, "count": 5 },"type":"request","seq":7}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 7
        expect /success == true
        expect LENGTH(/body/variables) == 5

        expect /body/variables[0]/name == "[0]"
        expect /body/variables[0]/variablesReference == 0
        expect /body/variables[0]/value == 0

        expect /body/variables[1]/name == "[1]"
        expect /body/variables[1]/variablesReference == 0
        expect /body/variables[1]/value == 0.1

        expect /body/variables[2]/name == "[2]"
        expect /body/variables[2]/variablesReference == 0
        expect /body/variables[2]/value == 0.2

        expect /body/variables[3]/name == "[3]"
        expect /body/variables[3]/variablesReference == 0
        expect /body/variables[3]/value == 0.3

        expect /body/variables[4]/name == "[4]"
        expect /body/variables[4]/variablesReference == 0
        expect /body/variables[4]/value == 0.4
    }
}

case "Get local int array" {
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":8}'
    response {
        # ignore response
    }
    response {
        # ignore stop event
    }
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":9}'
    response {
        # ignore response
    }
    response {
        # ignore stop event
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":10}'
    response {
        # ignore response
    }
    request '{"command":"variables","arguments":{"variablesReference":$(local_scope) },"type":"request","seq":11}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 11
        expect /success == true
        expect LENGTH(/body/variables) == 1

        expect /body/variables[0]/name == bar
        set bar_ref = /body/variables[0]/variablesReference
        expect /body/variables[0]/indexedVariables == 3
        expect /body/variables[0]/value == "int[]"
    }
    request '{"command":"variables","arguments":{"variablesReference":$(bar_ref), "filter":"indexed", "start": 0, "count": 5 },"type":"request","seq":12}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 12
        expect /success == true
        expect LENGTH(/body/variables) == 3

        expect /body/variables[0]/name == "[0]"
        expect /body/variables[0]/variablesReference == 0
        expect /body/variables[0]/value == 1

        expect /body/variables[1]/name == "[1]"
        expect /body/variables[1]/variablesReference == 0
        expect /body/variables[1]/value == 2

        expect /body/variables[2]/name == "[2]"
        expect /body/variables[2]/variablesReference == 0
        expect /body/variables[2]/value == 3
    }
}

case "Char array as string" {
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":13}'
    response {
        # ignore response
    }
    response {
        # ignore stop event
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":14}'
    response {
        # ignore response
    }
    request '{"command":"variables","arguments":{"variablesReference":$(local_scope) },"type":"request","seq":15}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 15
        expect /success == true
        expect LENGTH(/body/variables) == 2

        expect /body/variables[1]/name == baz
        expect /body/variables[1]/value =~ "0x[0-9a-f]* \"This is string\""
    }
}

case "Change global double array elements" {
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":16}'
    response {
        # ignore response
    }
    response {
        # ignore stop event
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":17}'
    response {
        # ignore response
    }
    request '{"command":"variables","arguments":{"variablesReference":$(foo_ref), "filter":"indexed", "start": 0, "count": 5 },"type":"request","seq":18}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 18
        expect /success == true
        expect LENGTH(/body/variables) == 5

        expect /body/variables[0]/name == "[0]"
        expect /body/variables[0]/variablesReference == 0
        expect /body/variables[0]/value == 3.14159

        expect /body/variables[1]/name == "[1]"
        expect /body/variables[1]/variablesReference == 0
        expect /body/variables[1]/value == 0.1

        expect /body/variables[2]/name == "[2]"
        expect /body/variables[2]/variablesReference == 0
        expect /body/variables[2]/value == 3.14159

        expect /body/variables[3]/name == "[3]"
        expect /body/variables[3]/variablesReference == 0
        expect /body/variables[3]/value == 0.3

        expect /body/variables[4]/name == "[4]"
        expect /body/variables[4]/variablesReference == 0
        expect /body/variables[4]/value == 3.14159
    }
}

case "Change local int array element" {
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":19}'
    response {
        # ignore response
    }
    response {
        # ignore stop event
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":20}'
    response {
        # ignore response
    }
    request '{"command":"variables","arguments":{"variablesReference":$(bar_ref), "filter":"indexed", "start": 0, "count": 5 },"type":"request","seq":21}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 21
        expect /success == true
        expect LENGTH(/body/variables) == 3

        expect /body/variables[0]/name == "[0]"
        expect /body/variables[0]/variablesReference == 0
        expect /body/variables[0]/value == 5

        expect /body/variables[1]/name == "[1]"
        expect /body/variables[1]/variablesReference == 0
        expect /body/variables[1]/value == 2

        expect /body/variables[2]/name == "[2]"
        expect /body/variables[2]/variablesReference == 0
        expect /body/variables[2]/value == 3
    }
}

case "Change local char array element (string)" {
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":22}'
    response {
        # ignore response
    }
    response {
        # ignore stop event
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":23}'
    response {
        # ignore response
    }
    request '{"command":"variables","arguments":{"variablesReference":$(local_scope) },"type":"request","seq":24}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 24
        expect /success == true
        expect LENGTH(/body/variables) == 2

        expect /body/variables[1]/name == baz
        expect /body/variables[1]/value =~ "0x[0-9a-f]* \"This\""
    }
}

case "Dynamically-allocated array" {
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":25}'
    response {
        # ignore response
    }
    response {
        # ignore stop event
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":26}'
    response {
        # ignore response
    }
    request '{"command":"variables","arguments":{"variablesReference":$(local_scope) },"type":"request","seq":27}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 27
        expect /success == true
        expect LENGTH(/body/variables) == 3

        expect /body/variables[2]/name == dynamic
        set dyn_ref = /body/variables[2]/variablesReference
        expect /body/variables[2]/value =~ "(int\*)0x[0-9a-f]*"
    }
    request '{"command":"variables","arguments":{"variablesReference":$(dyn_ref), "filter":"indexed", "start": 0, "count": 5 },"type":"request","seq":28}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 28
        expect /success == true
        expect LENGTH(/body/variables) == 3

        expect /body/variables[0]/name == "[0]"
        expect /body/variables[0]/variablesReference == 0
        expect /body/variables[0]/value == 0

        expect /body/variables[1]/name == "[1]"
        expect /body/variables[1]/variablesReference == 0
        expect /body/variables[1]/value == 0

        expect /body/variables[2]/name == "[2]"
        expect /body/variables[2]/variablesReference == 0
        expect /body/variables[2]/value == 0
    }
}

case "Change value in dynamic array" {
    request '{"command":"next","arguments":{"threadId":1},"type":"request","seq":29}'
    response {
        # ignore response
    }
    response {
        # ignore stop event
    }
    request '{"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":20},"type":"request","seq":30}'
    response {
        # ignore response
    }
    request '{"command":"variables","arguments":{"variablesReference":$(dyn_ref), "filter":"indexed", "start": 0, "count": 5 },"type":"request","seq":31}'
    response {
        expect /type == "response"
        expect /command == variables
        expect /request_seq == 31
        expect /success == true
        expect LENGTH(/body/variables) == 3

        expect /body/variables[0]/name == "[0]"
        expect /body/variables[0]/variablesReference == 0
        expect /body/variables[0]/value == 42

        expect /body/variables[1]/name == "[1]"
        expect /body/variables[1]/variablesReference == 0
        expect /body/variables[1]/value == 0

        expect /body/variables[2]/name == "[2]"
        expect /body/variables[2]/variablesReference == 0
        expect /body/variables[2]/value == 42
    }
}

stop
